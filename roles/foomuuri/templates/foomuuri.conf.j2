################################################################################
# This file was generated by Ansible for {{ ansible_fqdn }}
# Do NOT modify this file by hand!
################################################################################
# Foomuuri configuration file
# See: https://github.com/FoobarOy/foomuuri/wiki/Configuration

{% if foomuuri_config %}
#### start global configuration ####
{% set config_items = [] %}
{% for key, value in foomuuri_config.items() %}
{% set _ = config_items.append({"name": key, "value": value}) %}
{% endfor %}
{% set max_name_length = config_items | map(attribute='name') | map('length') | max %}
foomuuri {
{% for item in config_items %}
    {{ '{:<{width}}'.format(item.name, width=max_name_length + 4) }} {{ item.value }}
{% endfor %}
}
#### end global configuration ####

{% endif %}
#### start zone section ####
zone {
    # Localhost zone - must be empty without interfaces
    localhost
{% set all_zones = (foomuuri_zones + foomuuri_extra_zones) %}
{% set seen = [] %}
{% for zone in all_zones %}
{%  if zone.interfaces is defined and zone.interfaces|length > 0 %}
{%   set key = (zone.name, zone.interfaces | join(',')) %}
{%   if key not in seen %}
{%    set _ = seen.append(key) %}
    # {{ zone.description | default(zone.name | title + ' zone') }}
    {{ zone.name }} {{ zone.interfaces | join(' ') }}
{%   endif %}
{%  endif %}
{% endfor %}
}
#### end zone section ####

{% if foomuuri_macros is defined or foomuuri_extra_macros is defined %}
#### start macro section ####
# See /usr/share/foomuuri/default.services.conf for the default macros defined by the foomuuri developers such as ssh, snmp, http, etc.
{% set all_macros = (foomuuri_macros | default([])) + (foomuuri_extra_macros | default([])) %}
{% if all_macros | length > 0 %}
{% set max_name_length = all_macros | map(attribute='name') | map('length') | max %}
macro {
{% if all_macros | selectattr('protocols', 'defined') | list | length > 0 %}
    # Self defined services (macro's)
{% for macro in all_macros %}
{%   if macro.protocols is defined %}
    {{ '{:<{width}}'.format(macro.name, width=max_name_length + 4) }} {% set proto_parts = [] %}
{%     if macro.ports is defined %}
{# old style: protocols + ports #}
{%       for proto in macro.protocols %}
{%         set _ = proto_parts.append(proto ~ ' ' ~ (macro.ports | join(' '))) %}
{%       endfor %}
{%     else %}
{# new style: mapping proto -> [ports] #}
{%       for proto, ports in macro.protocols.items() %}
{%         set _ = proto_parts.append(proto ~ ' ' ~ (ports | join(' '))) %}
{%       endfor %}
{%     endif %}
{{ proto_parts | join('; ') }}
{%   endif %}
{% endfor %}

{% endif %}
{% if all_macros | selectattr('ips', 'defined') | list | length > 0 %}
    # Macro's with subnets, ranges and/or IP-addresses
{% for macro in all_macros %}
{%   if macro.ips is defined %}
    {{ '{:<{width}}'.format(macro.name, width=max_name_length + 4) }} {{ macro.ips | join(' ') }}
{%   endif %}
{% endfor %}

{% endif %}
{% if all_macros | selectattr('use_macros', 'defined') | list | length > 0 %}
    # Macro's with other macro's included
{% for macro in all_macros %}
{%   if macro.use_macros is defined %}
    {{ '{:<{width}}'.format(macro.name, width=max_name_length + 4) }} {{ macro.use_macros | join('; ') }}
{%   endif %}
{% endfor %}
{% endif %}
}
{% endif %}
#### end macro section ###
{% endif %}

{% set all_templates = foomuuri_templates %}
{% if foomuuri_extra_templates %}
{% set _ = all_templates.update(foomuuri_extra_templates) %}
{% endif %}

{% if all_templates %}
#### start template section ####
{% for template_name, template_data in all_templates.items() %}
template {{ template_name }} {
{% if template_data.description %}
    # {{ template_data.description }}
{% endif %}
{% for rule in template_data.rules %}
    {{ rule }}
{% endfor %}
}

{% endfor %}
#### end template section ####

{% endif %}
{% if foomuuri_zonemap_rules or foomuuri_extra_zonemap_rules %}
#### start zonemap section ####
{% set all_zonemap_rules = foomuuri_zonemap_rules + foomuuri_extra_zonemap_rules %}
zonemap {
{% for rule in all_zonemap_rules %}
    {{ rule }}
{% endfor %}
}
#### end zonemap section ####

{% endif %}
{% set all_any_zone_rules = foomuuri_any_zone_rules %}
{% if foomuuri_extra_any_zone_rules %}
{% for section, rules in foomuuri_extra_any_zone_rules.items() %}
{% if section in all_any_zone_rules %}
{% set _ = all_any_zone_rules[section].extend(rules) %}
{% else %}
{% set _ = all_any_zone_rules.update({section: rules}) %}
{% endif %}
{% endfor %}
{% endif %}

{% if all_any_zone_rules %}
#### start any-zone section ####
{% for section_name, rules in all_any_zone_rules.items() %}
{{ section_name }} {
{% for rule in rules %}
    {{ rule }}
{% endfor %}
}

{% endfor %}
#### end any-zone section ####

{% endif %}
{% set all_policies = foomuuri_zone_policies + foomuuri_extra_zone_policies %}
{% if not all_policies %}
{% set all_policies = foomuuri_default_localhost_policy %}
{% endif %}

{% set existing_zones = ['localhost'] %}
{% for zone in foomuuri_zones + foomuuri_extra_zones %}
{% if zone.interfaces is defined and zone.interfaces | length > 0 %}
{% set _ = existing_zones.append(zone.name) %}
{% endif %}
{% endfor %}

{% for policy in all_policies %}
{% if policy.from_zone in existing_zones and policy.to_zone in existing_zones %}
{{ policy.from_zone }}-{{ policy.to_zone }} {
{% if policy.description %}
    # {{ policy.description }}
{% endif %}
{% for rule in policy.rules %}
    {{ rule }}
{% endfor %}
}

{% endif %}
{% endfor %}

# Auto-generate monitoring access rules if enabled
{% if foomuuri_monitoring_enabled or foomuuri_management_enabled %}
{% for zone in existing_zones %}
{% if zone != 'localhost' %}
{{ zone }}-localhost {
    # Auto-generated monitoring and management access
{% if foomuuri_monitoring_enabled %}
{% for service in foomuuri_monitoring_services %}
{% if service.sources is defined %}
{% for source_zone, ips in service.sources.items() %}
{% if source_zone == zone and ips %}
{% if service.port is defined %}
    {{ service.name }} {{ service.port }} saddr {{ source_zone }}-{{ service.name }}-ips
{% else %}
    {{ service.name }} saddr {{ source_zone }}-{{ service.name }}-ips
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% if foomuuri_management_enabled and zone in ['public', 'management'] %}
    template management_services saddr management-sources
{% endif %}
    drop log
}

localhost-{{ zone }} {
    # Allow outgoing traffic to {{ zone }}
    accept
}

{% endif %}
{% endfor %}
{% endif %}

{% if foomuuri_iplists or foomuuri_extra_iplists %}
#### start iplist section ####
{% set all_iplists = foomuuri_iplists %}
{% set _ = all_iplists.update(foomuuri_extra_iplists) %}
iplist {
{% if foomuuri_iplist_global_settings %}
    # Global iplist settings
{% for setting, value in foomuuri_iplist_global_settings.items() %}
    {{ setting }}={{ value }}
{% endfor %}

{% endif %}
    # IP lists and DNS resolvers
{% for iplist_name, iplist_entries in all_iplists.items() %}
    # {{ iplist_name }} entries
{% if iplist_entries is string %}
    {{ iplist_name }} {{ iplist_entries }}
{% else %}
{% for entry in iplist_entries %}
    {{ iplist_name }}{% if not loop.first %} +{% endif %} {{ entry }}
{% endfor %}
{% endif %}
{% endfor %}
}
#### end iplist section ####

{% endif %}
{% if foomuuri_snat_rules or foomuuri_extra_snat_rules %}
#### start snat section ####
{% set all_snat_rules = foomuuri_snat_rules + foomuuri_extra_snat_rules %}
snat {
{% for rule in all_snat_rules %}
    {{ rule }}
{% endfor %}
}
#### end snat section ####

{% endif %}
{% if foomuuri_dnat_rules or foomuuri_extra_dnat_rules %}
#### start dnat section ####
{% set all_dnat_rules = foomuuri_dnat_rules + foomuuri_extra_dnat_rules %}
dnat {
{% for rule in all_dnat_rules %}
    {{ rule }}
{% endfor %}
}
#### end dnat section ####

{% endif %}
{% set all_mangle_rules = foomuuri_mangle_rules %}
{% if foomuuri_extra_mangle_rules %}
{% for section, rules in foomuuri_extra_mangle_rules.items() %}
{% if section in all_mangle_rules %}
{% set _ = all_mangle_rules[section].extend(rules) %}
{% else %}
{% set _ = all_mangle_rules.update({section: rules}) %}
{% endif %}
{% endfor %}
{% endif %}

{% if all_mangle_rules %}
#### start mangle section ####
{% for section_name, rules in all_mangle_rules.items() %}
{{ section_name }} {
{% for rule in rules %}
    {{ rule }}
{% endfor %}
}

{% endfor %}
#### end mangle section ####

{% endif %}
{% set all_special_rules = foomuuri_special_chain_rules %}
{% if foomuuri_extra_special_chain_rules %}
{% for section, rules in foomuuri_extra_special_chain_rules.items() %}
{% if section in all_special_rules %}
{% set _ = all_special_rules[section].extend(rules) %}
{% else %}
{% set _ = all_special_rules.update({section: rules}) %}
{% endif %}
{% endfor %}
{% endif %}

{% if all_special_rules %}
#### start special chains section ####
{% for chain_name, rules in all_special_rules.items() %}
{{ chain_name }} {
{% for rule in rules %}
    {{ rule }}
{% endfor %}
}

{% endfor %}
#### end special chains section ####

{% endif %}
{% if foomuuri_monitor_targets or foomuuri_extra_monitor_targets %}
#### start monitor section ####
{% set all_monitor_targets = foomuuri_monitor_targets + foomuuri_extra_monitor_targets %}
{% for target in all_monitor_targets %}
target {{ target.name }} {{ target.target }}{% if target.interval is defined %} {{ target.interval }}{% endif %}
{% endfor %}
#### end monitor section ####

{% endif %}
#### end zone-zone section ####
